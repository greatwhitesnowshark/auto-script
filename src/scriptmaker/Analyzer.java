/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package scriptmaker;

import game.network.InPacket;
import io.netty.buffer.Unpooled;
import packet.PacketWrapper;
import packet.LoopbackCode;
import script.ScriptTemplateMap;
import script.Compiler;
import java.awt.Color;
import java.awt.Insets;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import packet.ClientCode;
import util.Logger;

/**
 *
 * @author Sharky
 */
public class Analyzer extends javax.swing.JFrame {
    
    /**
     * Creates new form Analyzer
     */
    public Analyzer() {
        try {
            ScriptTemplateMap.GetInstance().LoadTemplateMap();
        } catch (IOException e) {
            e.printStackTrace();
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sharky's Special Scripting Script-Maker");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Georgia", 2, 12)); // NOI18N

        jFileChooser1.setCurrentDirectory(new java.io.File("C:\\Users\\Chris\\Desktop"));
        jFileChooser1.setDialogTitle("");
        jFileChooser1.setMultiSelectionEnabled(true);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jLabel1.setText("    Select 1 or more .msb files to analyze...");
        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 536, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
        //Create the new Text Area to place in the JScrollPane (panel)
        JTextArea jLog = new JTextArea(25, 50);
        jLog.setMargin(new Insets(5,5,5,5));
        jLog.setEditable(true);
        jLog.setVisible(true);
        long tPacketTime = 0;
        //Add content to the (text area) based on the jFileChooser1's event responses
        if (jFileChooser1.getSelectedFiles() != null && jFileChooser1.getSelectedFiles().length > 0) {
            //Add content to the window.
            for (File pFile : jFileChooser1.getSelectedFiles()) {
                
                try (DataInputStream pDataInputStream = new DataInputStream(new FileInputStream(pFile))) {
                    long tCur = tPacketTime = System.currentTimeMillis();
                    System.out.print(String.format("Processing file `%s`.....", pFile.getName()));
                    short nVersion = ReadShort(pDataInputStream);
                    String nLocalEndPoint = ReadString(pDataInputStream);
                    short nLocalPort = ReadShort(pDataInputStream);
                    String sRemoteEndPoint = ReadString(pDataInputStream);
                    short nRemotePort = ReadShort(pDataInputStream);
                    byte nLocale = pDataInputStream.readByte();
                    short nBuild = ReadShort(pDataInputStream);
                    String sPatchLocation = ReadString(pDataInputStream);
                    while (true) {
                        // no length encoded :(
                        if (System.currentTimeMillis() - tCur >= 1000) {
                            System.out.print(".");
                            tCur = System.currentTimeMillis();
                        }
                        long tTimestamp = ReadLong(pDataInputStream);
                        int nSize = ReadInt(pDataInputStream);
                        short nHeader = ReadShort(pDataInputStream);
                        boolean bLoopback = !pDataInputStream.readBoolean();
                        byte[] aContent = ReadArr(pDataInputStream, nSize);
                        byte[] aTotalContent = new byte[2 + aContent.length];
                        aTotalContent[0] = (byte) (nHeader & 0xFF);
                        aTotalContent[1] = (byte) ((nHeader >> 8) & 0xFF);
                        System.arraycopy(aContent, 0, aTotalContent, 2, aContent.length);
                        int aPreDecodeIV = ReadInt(pDataInputStream);
                        int aPostDecodeIV = ReadInt(pDataInputStream);
                        InPacket iPacket = new InPacket(Unpooled.wrappedBuffer(aContent));
                        PacketWrapper pPacketWrapper = null;
                        if (bLoopback) {
                            LoopbackCode pCode = LoopbackCode.GetLoopback(nHeader);
                            if (pCode != null) {
                                pPacketWrapper = pCode.pDecodePacket.ReadPacket(iPacket);
                            }
                        } else {
                            ClientCode pCode = ClientCode.GetClient(nHeader);
                            if (pCode != null) {
                                pPacketWrapper = pCode.pDecodePacket.ReadPacket(iPacket);
                            }
                        }
                        if (pPacketWrapper != null) {
                            Compiler.Compile(pPacketWrapper);
                        }
                    }
                } catch (EOFException e) {
                    // no length specified, so this is intended.
                    long nTimeTaken = System.currentTimeMillis() - tPacketTime;
                    System.out.println("completed.");
                    Logger.LogReport("Done analyzing file [%s]... time: %dms", pFile.getName(), nTimeTaken);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            jLog.append(Compiler.GetOutputLog());
        } else if (jFileChooser1.getSelectedFile() != null) {
            jLog.append(jFileChooser1.getSelectedFile().getName() + "\r\n");
        }
        
        //Create the new window
        JFrame frame = new JFrame("Sniff Analyzer");
        //Add Content
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JScrollPane jScrollPane = new JScrollPane(jLog);
        frame.add(jScrollPane);
        frame.setBackground(Color.GRAY);
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Analyzer().setVisible(true);
        });
    }
    
    //Credit to: Swordie devs for read- methods, muchas gracias ~~
    private static short ReadShort(DataInputStream dis) throws IOException {
        short s = (short) (dis.readByte() & 0xFF);
        s += (dis.readByte() & 0xFF) << 8;
        return s;
    }

    private static int ReadInt(DataInputStream dis) throws IOException {
        int s = (dis.readByte() & 0xFF);
        s += (dis.readByte() & 0xFF) << 8;
        s += (dis.readByte() & 0xFF) << 16;
        s += (dis.readByte() & 0xFF) << 24;
        return s;
    }

    private static long ReadLong(DataInputStream dis) throws IOException {
        long s = (dis.readByte() & 0xFF);
        s += (dis.readByte() & 0xFF) << 8;
        s += (dis.readByte() & 0xFF) << 16;
        s += (dis.readByte() & 0xFF) << 24;
        s += (long) (dis.readByte() & 0xFF) << 32;
        s += (long) (dis.readByte() & 0xFF) << 40;
        s += (long) (dis.readByte() & 0xFF) << 48;
        s += (long) (dis.readByte() & 0xFF) << 56;
        return s;
    }
    
    
    
    private static String ReadString(DataInputStream dis) throws IOException {
        int size = dis.readByte();
        byte[] arr = new byte[size];
        for (int i = 0; i < size; i++) {
            arr[i] = dis.readByte();
        }
        return new String(arr);
    }

    private static byte[] ReadArr(DataInputStream dis, int size) throws IOException {
        byte[] arr = new byte[size];
        for (int i = 0; i < size; i++) {
            arr[i] = dis.readByte();
        }
        return arr;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
